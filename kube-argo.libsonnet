local kr8_cluster = std.extVar('kr8_cluster');
local kube = import 'kube-libsonnet/kube.libsonnet';
{
  Argo_App_Project(tier): kube._Object('argoproj.io/v1alpha1', 'AppProject', kr8_cluster.name + '-' + tier) {
    metadata+: {
      namespace: 'argo',
      finalizers: ['resources-finalizer.argocd.argoproj.io'],
    },
    spec+: {
      description: 'Project for Applications classified as' + tier,
      // Allow manifests to deploy from any Git repos
      sourceRepos: ['*'],
      destinations: [{
        namespace: '*',
        server: '*',
      }],
      // Deny all cluster-scoped resources from being created, except for Namespace
      clusterResourceWhitelist:
        (if tier == 'core' then [{
           group: '*',
           kind: '*',
         }]
         else [
           {
             group: '*',
             kind: 'Namespace',
           },
           {
             group: '*',
             kind: 'ClusterRole',
           },
           {
             group: '*',
             kind: 'ClusterRoleBinding',
           },
           {
             group: '*',
             kind: 'CustomResourceDefinition',
           },
         ]),
      // Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy
      namespaceResourceBlacklist: [
        {
          group: '',
          kind: 'ResourceQuota',
        },
        {
          group: '',
          kind: 'LimitRange',
        },
        {
          group: '',
          kind: 'NetworkPolicy',
        },
      ],
      // Deny all namespaced-scoped resources from being created, except for Deployment and StatefulSet
      namespaceResourceWhitelist: [{
        group: '*',
        kind: '*',
      }],
      roles: [
        // A role which provides read-only access to all applications in the project
        {
          name: 'read-only',
          description: 'Read-only privileges to' + tier,
          policies: ['p, proj:' + tier + ':read-only, applications, get,' + tier + '/*, allow'],
          groups: ['my-oidc-group'],
        },
        // A role which provides sync privileges to only the guestbook-dev application, e.g. to provide
        // sync privileges to a CI system
        //  - name: ci-role
        //    description: Sync privileges for guestbook-dev
        //    policies:
        //    - p, proj:{{ project_tier }}:ci-role, applications, sync, {{ project_tier }}/guestbook-dev, allow
        //    # NOTE: JWT tokens can only be generated by the API server and the token is not persisted
        //    # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list.
        //    jwtTokens:
        //    - iat: 1535390316
      ],
    },
  },
}